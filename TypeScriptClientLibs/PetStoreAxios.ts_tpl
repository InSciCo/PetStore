/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { Auth} from "aws-amplify";
import { AppConfig } from "./AppConfig";
import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class LzClientBaseAxios {
    private appConfig: any;

    constructor(appConfig: any) {
        this.appConfig = appConfig;
    }

    protected async transformOptions(clientMethod: string, options: AxiosRequestConfig) {
        let gatewayName = this.appConfig.MethodMap[clientMethod]; // get ApiGateway servicing the method
        let gateway = this.appConfig.Aws.ApiGateways[gatewayName];
        let port = (gateway.Port === 443) ? "" : ":" + gateway.Port;
        let url = gateway.Scheme + "://" + gateway.Id + "." + gateway.Service + "." + AppConfig.Aws.Region + "." + gateway.Host + port + "/" + gateway.Stage;

        options.url = url + options.url;

        switch(gateway.SecurityLevel) {

            case 0:
                // No security so don't add a header
                break;
            case 1: // JWT
                options.headers = {
                    ...Headers,
                    Authorization: (await Auth.currentSession()).getAccessToken().getJwtToken()
                };
                break;
            case 2: // // AwsSignatureVersion4
                throw new Error("Signed Requests unsupported in JS client.")
                // Todo: Use amplify to sign request
                //options.headers = {
                //    ...Headers,
                //    LzIdentity: (await Auth.currentSession()).getAccessToken().getJwtToken()
                //};
                //break;
            default:
                // Unknown security level so don't do anything
                break;
        }
        return Promise.resolve(options);
    }
}

export class PetStore extends LzClientBaseAxios {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: any, baseUrl?: string, instance?: AxiosInstance) {
        super(configuration);
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Add a new pet to the store
     * @param body (optional) 
     * @return successful operation
     */
    addPet(body: Pet | undefined , cancelToken?: CancelToken | undefined): Promise<Pet> {
        let url_ = this.baseUrl + "/pet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions("AddPetAsync",options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddPet(_response);
        });
    }

    protected processAddPet(response: AxiosResponse): Promise<Pet> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Pet.fromJS(resultData200);
            return result200;
        } else if (status === 405) {
            const _responseText = response.data;
            return throwException("Invalid input", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Pet>(<any>null);
    }

    /**
     * Update an existing pet
     * @param body (optional) 
     * @return successful operation
     */
    updatePet(body: Pet | undefined , cancelToken?: CancelToken | undefined): Promise<Pet> {
        let url_ = this.baseUrl + "/pet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions("UpdatePetAsync",options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdatePet(_response);
        });
    }

    protected processUpdatePet(response: AxiosResponse): Promise<Pet> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Pet.fromJS(resultData200);
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Invalid ID supplied", status, _responseText, _headers);
        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("Pet not found", status, _responseText, _headers);
        } else if (status === 405) {
            const _responseText = response.data;
            return throwException("Validation exception", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Pet>(<any>null);
    }

    getUser(  cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/pet/user";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions("GetUserAsync",options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetUser(_response);
        });
    }

    protected processGetUser(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(<any>null);
    }

    /**
     * Finds Pets by status
     * @param petStatus Status values that need to be considered for filter
     * @return successful operation
     */
    findPetsByStatus(petStatus: PetStatus[] , cancelToken?: CancelToken | undefined): Promise<Pet[]> {
        let url_ = this.baseUrl + "/pet/findByStatus?";
        if (petStatus === undefined || petStatus === null)
            throw new Error("The parameter 'petStatus' must be defined and cannot be null.");
        else
            petStatus && petStatus.forEach(item => { url_ += "petStatus=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions("FindPetsByStatusAsync",options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFindPetsByStatus(_response);
        });
    }

    protected processFindPetsByStatus(response: AxiosResponse): Promise<Pet[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Pet.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Invalid status value", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Pet[]>(<any>null);
    }

    /**
     * Find pet by ID
     * @param petId ID of pet to return
     * @return successful operation
     */
    getPetById(petId: number , cancelToken?: CancelToken | undefined): Promise<Pet> {
        let url_ = this.baseUrl + "/pet/{petId}";
        if (petId === undefined || petId === null)
            throw new Error("The parameter 'petId' must be defined.");
        url_ = url_.replace("{petId}", encodeURIComponent("" + petId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions("GetPetByIdAsync",options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPetById(_response);
        });
    }

    protected processGetPetById(response: AxiosResponse): Promise<Pet> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Pet.fromJS(resultData200);
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Invalid ID supplied", status, _responseText, _headers);
        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("Pet not found", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Pet>(<any>null);
    }

    /**
     * Deletes a pet
     * @param api_key (optional) 
     * @param petId Pet id to delete
     * @return Success
     */
    deletePet(api_key: string | undefined, petId: number , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/pet/{petId}";
        if (petId === undefined || petId === null)
            throw new Error("The parameter 'petId' must be defined.");
        url_ = url_.replace("{petId}", encodeURIComponent("" + petId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "api_key": api_key !== undefined && api_key !== null ? "" + api_key : "",
            },
            cancelToken
        };

        return this.transformOptions("DeletePetAsync",options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeletePet(_response);
        });
    }

    protected processDeletePet(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Invalid ID supplied", status, _responseText, _headers);
        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("Pet not found", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Get all Pet Categories
     * @return successful operation
     */
    getPetCategories(  cancelToken?: CancelToken | undefined): Promise<Category[]> {
        let url_ = this.baseUrl + "/pet/categories";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions("GetPetCategoriesAsync",options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPetCategories(_response);
        });
    }

    protected processGetPetCategories(response: AxiosResponse): Promise<Category[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Category.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Category[]>(<any>null);
    }

    /**
     * Get all Pet Tags
     * @return successful operation
     */
    getPetTags(  cancelToken?: CancelToken | undefined): Promise<Tag[]> {
        let url_ = this.baseUrl + "/pet/tags";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions("GetPetTagsAsync",options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPetTags(_response);
        });
    }

    protected processGetPetTags(response: AxiosResponse): Promise<Tag[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Tag.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Tag[]>(<any>null);
    }

    /**
     * Returns pet inventories by status
     * @return successful operation
     */
    getInventory(  cancelToken?: CancelToken | undefined): Promise<{ [key: string]: number; }> {
        let url_ = this.baseUrl + "/order/inventory";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions("GetInventoryAsync",options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetInventory(_response);
        });
    }

    protected processGetInventory(response: AxiosResponse): Promise<{ [key: string]: number; }> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)![key] = resultData200[key];
                }
            }
            else {
                result200 = <any>null;
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<{ [key: string]: number; }>(<any>null);
    }

    /**
     * Place an order for a pet
     * @param body order placed for purchasing the pet
     * @return successful operation
     */
    placeOrder(body: Order , cancelToken?: CancelToken | undefined): Promise<Order> {
        let url_ = this.baseUrl + "/order";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions("PlaceOrderAsync",options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPlaceOrder(_response);
        });
    }

    protected processPlaceOrder(response: AxiosResponse): Promise<Order> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Order.fromJS(resultData200);
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Invalid Order", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Order>(<any>null);
    }

    /**
     * Find purchase order by ID
     * @param orderId ID of pet that needs to be fetched
     * @return successful operation
     */
    getOrderById(orderId: number , cancelToken?: CancelToken | undefined): Promise<Order> {
        let url_ = this.baseUrl + "/order/{orderId}";
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions("GetOrderByIdAsync",options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetOrderById(_response);
        });
    }

    protected processGetOrderById(response: AxiosResponse): Promise<Order> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Order.fromJS(resultData200);
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Invalid ID supplied", status, _responseText, _headers);
        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("Order not found", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Order>(<any>null);
    }

    /**
     * Delete purchase order by ID
     * @param orderId ID of the order that needs to be deleted
     * @return Success
     */
    deleteOrder(orderId: number , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/order/{orderId}";
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.transformOptions("DeleteOrderAsync",options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteOrder(_response);
        });
    }

    protected processDeleteOrder(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Invalid ID supplied", status, _responseText, _headers);
        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("Order not found", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Finds Pets by tags
     * @param tags Tags to filter by
     * @return successful operation
     */
    findPetsByTags(tags: string[] , cancelToken?: CancelToken | undefined): Promise<Pet[]> {
        let url_ = this.baseUrl + "/pet/findByTags?";
        if (tags === undefined || tags === null)
            throw new Error("The parameter 'tags' must be defined and cannot be null.");
        else
            tags && tags.forEach(item => { url_ += "tags=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions("FindPetsByTagsAsync",options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFindPetsByTags(_response);
        });
    }

    protected processFindPetsByTags(response: AxiosResponse): Promise<Pet[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Pet.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Invalid tag value", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Pet[]>(<any>null);
    }

    /**
     * See pet database
     * @return Success
     */
    seedPets(  cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/pet/seedPets";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.transformOptions("SeedPetsAsync",options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSeedPets(_response);
        });
    }

    protected processSeedPets(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class Order implements IOrder {
    id?: number;
    /** Cognito Identity Id of clerk entering order */
    userId?: string;
    petId?: number;
    quantity?: number;
    shipDate?: Date;
    /** Order Status */
    orderStatus?: OrderStatus;
    complete?: boolean;
    createUtcTick?: number;
    updateUtcTick?: number;

    constructor(data?: IOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.complete = false;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.petId = _data["petId"];
            this.quantity = _data["quantity"];
            this.shipDate = _data["shipDate"] ? new Date(_data["shipDate"].toString()) : <any>undefined;
            this.orderStatus = _data["orderStatus"];
            this.complete = _data["complete"] !== undefined ? _data["complete"] : false;
            this.createUtcTick = _data["createUtcTick"];
            this.updateUtcTick = _data["updateUtcTick"];
        }
    }

    static fromJS(data: any): Order {
        data = typeof data === 'object' ? data : {};
        let result = new Order();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["petId"] = this.petId;
        data["quantity"] = this.quantity;
        data["shipDate"] = this.shipDate ? this.shipDate.toISOString() : <any>undefined;
        data["orderStatus"] = this.orderStatus;
        data["complete"] = this.complete;
        data["createUtcTick"] = this.createUtcTick;
        data["updateUtcTick"] = this.updateUtcTick;
        return data; 
    }
}

export interface IOrder {
    id?: number;
    /** Cognito Identity Id of clerk entering order */
    userId?: string;
    petId?: number;
    quantity?: number;
    shipDate?: Date;
    /** Order Status */
    orderStatus?: OrderStatus;
    complete?: boolean;
    createUtcTick?: number;
    updateUtcTick?: number;
}

/** Order Status */
export enum OrderStatus {
    Placed = "placed",
    Approved = "approved",
    Delivered = "delivered",
}

export class Category implements ICategory {
    id?: number;
    name?: string;

    constructor(data?: ICategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Category {
        data = typeof data === 'object' ? data : {};
        let result = new Category();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface ICategory {
    id?: number;
    name?: string;
}

export class Tag implements ITag {
    id?: number;
    name?: string;

    constructor(data?: ITag) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Tag {
        data = typeof data === 'object' ? data : {};
        let result = new Tag();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface ITag {
    id?: number;
    name?: string;
}

export class Pet implements IPet {
    id?: number;
    category?: Category;
    name!: string;
    photoUrls!: string[];
    tags?: Tag[];
    /** pet status in the store */
    petStatus?: PetStatus;
    createUtcTick?: number;
    updateUtcTick?: number;

    constructor(data?: IPet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.photoUrls = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.category = _data["category"] ? Category.fromJS(_data["category"]) : <any>undefined;
            this.name = _data["name"];
            if (Array.isArray(_data["photoUrls"])) {
                this.photoUrls = [] as any;
                for (let item of _data["photoUrls"])
                    this.photoUrls!.push(item);
            }
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(Tag.fromJS(item));
            }
            this.petStatus = _data["petStatus"];
            this.createUtcTick = _data["createUtcTick"];
            this.updateUtcTick = _data["updateUtcTick"];
        }
    }

    static fromJS(data: any): Pet {
        data = typeof data === 'object' ? data : {};
        let result = new Pet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["category"] = this.category ? this.category.toJSON() : <any>undefined;
        data["name"] = this.name;
        if (Array.isArray(this.photoUrls)) {
            data["photoUrls"] = [];
            for (let item of this.photoUrls)
                data["photoUrls"].push(item);
        }
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item.toJSON());
        }
        data["petStatus"] = this.petStatus;
        data["createUtcTick"] = this.createUtcTick;
        data["updateUtcTick"] = this.updateUtcTick;
        return data; 
    }
}

export interface IPet {
    id?: number;
    category?: Category;
    name: string;
    photoUrls: string[];
    tags?: Tag[];
    /** pet status in the store */
    petStatus?: PetStatus;
    createUtcTick?: number;
    updateUtcTick?: number;
}

/** pet status in the store */
export enum PetStatus {
    Available = "available",
    Pending = "pending",
    Sold = "sold",
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}
